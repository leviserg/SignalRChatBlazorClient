@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>

@if (!isConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="Your name?"/>
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>
    </div>
}
else
{
    <textarea style="width:100%; height:200px" @ref="TextAreaRef">
        @chatmessages
    </textarea>
    <div class="input-group">
        <input @bind-value="usermessage" @bind-value:event="oninput"
        @onkeyup="HandleInput" class="form-control">
        <button class="btn btn-primary form-control-append" 
            @onclick="Send" disabled="@(!isConnected)">
            Send</button>
    </div>
}

@code{
    private HubConnection? hubConnection;
    private string chatmessages = string.Empty;
    private string username = string.Empty;
    private string usermessage = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chat?username={username}"))
            .Build();

        hubConnection.On<string, string>("SendToClient", (user, usermessage) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {usermessage}";
            chatmessages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, usermessage);
            usermessage = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key.Equals("Enter") )
        {
            await Send();
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
